{
  "name": "Invoice Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "q": "has:attachment (filename:pdf OR filename:jpg OR filename:png OR filename:jpeg)",
          "readStatus": "unread"
        },
        "options": {
          "dataPropertyAttachmentsPrefixName": "attachment_",
          "downloadAttachments": true
        }
      },
      "id": "9b5bf934-718f-48a6-9347-958edb92c251",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1,
      "position": [
        -912,
        -80
      ],
      "credentials": {
        "gmailOAuth2": {
          "id": "DqAfUivOnM0K2Yan",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = [];\n\nfor (const item of $input.all()) {\n  if (!item.binary) continue;\n  \n  const binaryKeys = Object.keys(item.binary);\n  for (const key of binaryKeys) {\n    const attachment = item.binary[key];\n    if (!attachment) continue;\n    \n    const fileName = attachment.fileName || 'unknown';\n    const mimeType = (attachment.mimeType || '').toLowerCase();\n    \n    const isPDF = mimeType.includes('pdf');\n    const isImage = mimeType.includes('image');\n    \n    if (isPDF || isImage) {\n      items.push({\n        json: {\n          fileName: fileName,\n          mimeType: mimeType,\n          fileType: isPDF ? 'pdf' : 'image',\n          emailFrom: item.json.headers?.from || '',\n          emailSubject: item.json.headers?.subject || ''\n        },\n        binary: {\n          data: attachment\n        }\n      });\n    }\n  }\n}\n\nreturn items;"
      },
      "id": "0d4ec07d-b409-4b18-97fb-97f91d7e48af",
      "name": "Filter Attachments",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        -304
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.fileType }}",
              "value2": "pdf"
            }
          ]
        }
      },
      "id": "328b7a71-b429-4ac9-8a8f-2847ccdd7da1",
      "name": "Is PDF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -816,
        -304
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "e60b6daf-6941-4603-828c-345658c4d9fc",
      "name": "Extract PDF",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -560,
        -320
      ]
    },
    {
      "parameters": {
        "jsCode": "const item = $input.first();\nconst binaryData = item.binary.data;\n\nif (!binaryData || !binaryData.data) {\n  return [{ json: { error: 'No data' } }];\n}\n\nlet base64String;\nif (Buffer.isBuffer(binaryData.data)) {\n  base64String = binaryData.data.toString('base64');\n} else {\n  base64String = binaryData.data;\n}\n\nconst dataUrl = `data:image/jpeg;base64,${base64String}`;\n\nreturn [{\n  json: {\n    ...item.json,\n    base64Image: dataUrl\n  }\n}];"
      },
      "id": "ba236819-75bd-4c74-a13e-588a95e08e4f",
      "name": "Prepare Image",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -704,
        16
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an expert invoice data extraction assistant. Analyze the provided invoice text and extract all relevant information including: invoice number, vendor name, invoice date, due date, total amount, currency, line items with descriptions and amounts, tax information, and payment terms. Be precise and thorough.\n\nFrom content:\n\n{{ $json.fileName }}"
            }
          ]
        },
        "options": {}
      },
      "id": "89ebe4ec-4f05-40ee-90b3-4cc6486e9616",
      "name": "OpenAI OCR",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [
        -528,
        16
      ],
      "credentials": {
        "openAiApi": {
          "id": "HGr3Hx93ixZWDUnM",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nif (items.length === 0) return [];\n\nconst item = items[0];\nlet text = '';\n\nif (item.json.text) {\n  text = item.json.text;\n} else if (item.json.message?.content) {\n  text = item.json.message.content;\n} else if (item.json.choices?.[0]?.message?.content) {\n  text = item.json.choices[0].message.content;\n} else if (item.json.output) {\n  text = item.json.output;\n}\n\nreturn [{\n  json: {\n    text: { content: text },\n    fileName: item.json.fileName,\n    fileType: item.json.fileType,\n    emailFrom: item.json.emailFrom,\n    emailSubject: item.json.emailSubject\n  }\n}];"
      },
      "id": "94e67a23-9234-4a9f-9f70-ea5007671cfc",
      "name": "Merge Text",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        -160
      ]
    },
    {
      "parameters": {
        "text": "=Extract invoice data from this text and return it as JSON.\n\nInvoice Text:\n{{ $json.text.content }}\n\nExtract these fields:\n- invoice_number\n- invoice_date (YYYY-MM-DD format)\n- due_date (YYYY-MM-DD format)\n- vendor_name\n- customer_name\n- subtotal\n- tax_amount\n- total_amount\n- currency\n\nReturn as valid JSON object only.",
        "options": {}
      },
      "id": "646cf3ac-4d2a-4851-a6e5-06a21d8563fd",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        16,
        -160
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4695a87b-1987-416f-b9c4-d70e00a03c1b",
      "name": "Gemini Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -96,
        16
      ],
      "credentials": {
        "googlePalmApi": {
          "id": "4Zi2PCCSrTYySX1T",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let response = $input.first().json.output || '';\nresponse = response.trim().replace(/```json/g, '').replace(/```/g, '');\n\nconst firstBrace = response.indexOf('{');\nconst lastBrace = response.lastIndexOf('}');\n\nif (firstBrace === -1 || lastBrace === -1) {\n  return [{ json: { error: 'No JSON found' } }];\n}\n\nconst jsonString = response.substring(firstBrace, lastBrace + 1);\n\ntry {\n  const data = JSON.parse(jsonString);\n  return [{ json: data }];\n} catch (error) {\n  return [{ json: { error: error.message } }];\n}"
      },
      "id": "ac622330-f9a9-42e3-ac71-57f51e372ce1",
      "name": "Parse JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -160
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\n\nif (data.error) {\n  return [{\n    json: {\n      ...data,\n      isValid: false\n    }\n  }];\n}\n\nconst isValid = data.invoice_number && data.vendor_name && data.total_amount;\n\nlet urgency = 'normal';\nif (data.due_date) {\n  const dueDate = new Date(data.due_date);\n  const today = new Date();\n  const daysUntil = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));\n  \n  if (daysUntil < 0) urgency = 'critical';\n  else if (daysUntil <= 7) urgency = 'high';\n  else if (daysUntil <= 14) urgency = 'medium';\n}\n\nreturn [{\n  json: {\n    ...data,\n    isValid: true\n  }\n}];"
      },
      "id": "47baba92-4a4a-4bce-be1d-c75672978ed7",
      "name": "Validate Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        -160
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.isValid }}",
              "value2": true
            }
          ]
        }
      },
      "id": "8b4f6b12-ab28-49c4-aefc-c7b2ce634d78",
      "name": "Is Valid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        752,
        -160
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1GitT--icXUXcdM2669Y8wcnZMK6evNcgYvSxbdyKNyg",
          "mode": "list",
          "cachedResultName": "Invoice_Processing",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GitT--icXUXcdM2669Y8wcnZMK6evNcgYvSxbdyKNyg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GitT--icXUXcdM2669Y8wcnZMK6evNcgYvSxbdyKNyg/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "invoice_number",
              "displayName": "invoice_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "invoice_date",
              "displayName": "invoice_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "due_date",
              "displayName": "due_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "vendor_name",
              "displayName": "vendor_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "total_amount",
              "displayName": "total_amount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "currency",
              "displayName": "currency",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "isValid",
              "displayName": "isValid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "customer_name",
              "displayName": "customer_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "subtotal",
              "displayName": "subtotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tax_amount",
              "displayName": "tax_amount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "bfebb274-de6c-4afe-bde7-16bf602697f0",
      "name": "Log Success",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        976,
        -176
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QCMSlDYAJlMLISOp",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1GitT--icXUXcdM2669Y8wcnZMK6evNcgYvSxbdyKNyg",
          "mode": "list",
          "cachedResultName": "Invoice_Processing",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GitT--icXUXcdM2669Y8wcnZMK6evNcgYvSxbdyKNyg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1673809983,
          "mode": "list",
          "cachedResultName": "Failed Processing",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1GitT--icXUXcdM2669Y8wcnZMK6evNcgYvSxbdyKNyg/edit#gid=1673809983"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "error",
              "displayName": "error",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "isValid",
              "displayName": "isValid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "c389b905-8ed3-463b-af7c-1fcbe940a6f7",
      "name": "Log Error",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        64,
        48
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QCMSlDYAJlMLISOp",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.urgency }}",
              "value2": "critical"
            }
          ]
        }
      },
      "id": "d4cbe569-2b78-42a5-88d7-5e374ea791c9",
      "name": "Is Urgent",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        352,
        112
      ]
    },
    {
      "parameters": {
        "sendTo": "sriharsha0413@gmail.com",
        "subject": "=URGENT: Invoice {{ $json.invoice_number }}",
        "message": "=URGENT INVOICE\n\nInvoice: {{ $json.invoice_number }}\nVendor: {{ $json.vendor_name }}\nAmount: {{ $json.currency }} {{ $json.total_amount }}\nDue: {{ $json.due_date }}\n\nACTION REQUIRED",
        "options": {}
      },
      "id": "58625522-c98e-419f-a1bb-fe6a594aeaaa",
      "name": "Urgent Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        784,
        96
      ],
      "webhookId": "02dc4c81-19ca-4a77-ba95-283785f85d8d",
      "credentials": {
        "gmailOAuth2": {
          "id": "DqAfUivOnM0K2Yan",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "sriharsha0413@gmail.com",
        "subject": "=New Invoice: {{ $json.vendor_name }}",
        "message": "=Invoice Processed\n\nInvoice: {{ $json.invoice_number }}\nVendor: {{ $json.vendor_name }}\nAmount: {{ $json.currency }} {{ $json.total_amount }}\nDue: {{ $json.due_date }}",
        "options": {}
      },
      "id": "8a4a2f73-1fef-4585-9c54-54ada462d4aa",
      "name": "Normal Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        592,
        192
      ],
      "webhookId": "a39183e1-bc32-4593-aeb0-4754a44edc25",
      "credentials": {
        "gmailOAuth2": {
          "id": "DqAfUivOnM0K2Yan",
          "name": "Gmail account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Filter Attachments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Attachments": {
      "main": [
        [
          {
            "node": "Is PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is PDF": {
      "main": [
        [
          {
            "node": "Extract PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF": {
      "main": [
        [
          {
            "node": "Merge Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Image": {
      "main": [
        [
          {
            "node": "OpenAI OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI OCR": {
      "main": [
        [
          {
            "node": "Merge Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Text": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Parse JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON": {
      "main": [
        [
          {
            "node": "Validate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Data": {
      "main": [
        [
          {
            "node": "Is Valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Valid": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        [
          {
            "node": "Is Urgent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Urgent": {
      "main": [
        [
          {
            "node": "Urgent Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Normal Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e3df76d0-b814-446c-9a9a-2d08acce76c2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ccf417a0d70b100f87aef75481c4be37d0f1aeff6897db626e76318791226860"
  },
  "id": "uretnX0xAd3Nj3z0",
  "tags": []
}